##
## Programmer:    Craig Stuart Sapp <craig@ccrma.stanford.edu>
## Creation Date: Mon Aug 10 16:06:48 PDT 2015
## Last Modified: Fri Aug 14 14:53:33 PDT 2015
## Syntax:        GNU Makefile
## Filename:      /Makefile.examples
## vim:           ts=3
##
## Description: Makefile to compile programs using the  minHumdrum library.
##
## To run this makefile, type (without quotes) "make -f Makefile.examples",
## (or "gmake -f Makefile.examples" on FreeBSD computers). Although it is
## intended to be used with the file "Makefile" which runs this makefile with
## the command "make examples".  The program executables will be placed
## in the bin directory.  Note that you have to first create the library
## files with the main makefile using the command "make".
##
## Without arguments or with the argument "programs", this makefile will
## compile all programs.  If you give a program name as an argument, it
## will compile just that program. E.g.: "make -f Makefile.programs test1"
## or used in conjunction with "Makefile", type "make test1", which will
## compile the test1.cpp program and place it in the ./bin directory.

# Set the environmental variable $MACOSX_DEPLOYMENT_TARGET to
# "10.9" in Apple OS X to compile for OS X 10.9 and later (for example,
# you can compile for OS X 10.9 computers even if you are using the 10.10
# version of the operating system).
ENV =

ifeq ($(shell uname),Darwin)
   ENV = MACOSX_DEPLOYMENT_TARGET=10.9
   # use the following to compile for 32-bit architecture on 64-bit comps:
   #ARCH = -m32 -arch i386
else
   # use the following to compile for 32-bit architecture on 64-bit comps:
   # (you will need 32-bit libraries in order to do this)
   # ARCH = -m32
endif


###########################################################################
#                                                                         #
# Beginning of user-modifiable configuration variables                    #
#                                                                         #

INCDIR    = include
LIBDIR    = lib
LIBFILE   = humlib
#LIBFILE   = humdrum
TARGDIR   = bin

PREFLAGS  = -Wall -I$(INCDIR)
PREFLAGS += -O3
PREFLAGS += -g

# using C++ 2011 standard:
PREFLAGS += -std=c++11

# Add -static flag to compile without dynamics libraries for better portability:
#PREFLAGS += -static

POSTFLAGS ?= -L$(LIBDIR) -l$(LIBFILE)


COMPILER       = LANG=C $(ENV) g++ $(ARCH)
# Alternatly, use clang++ v3.3:
#COMPILER      = clang++
#PREFLAGS     += -stdlib=libc++

#                                                                         #
# End of user-modifiable variables.                                       #
#                                                                         #
###########################################################################

# setting up the directory paths to search for dependency files
vpath %.h   $(INCDIR)
vpath %.cpp $(wildcard tests/test-*) examples myprograms

# targets which don't actually refer to files
.PHONY: examples


###########################################################################
#                                                                         #
#                                                                         #

examples: all
all: bin $(addprefix $(TARGDIR)/,$(PROGS))
	@echo Finished compiling all programs.

info:
	@echo "Programs to compile: $(PROGS)" | fmt

bin:
ifeq ($(wildcard $(TARGDIR)),)
	@-mkdir -p $(TARGDIR)
endif


###########################################################################
#
# Defining explicit rules for program sourcefile dependencies:
#

$(TARGDIR)/% : $(notdir %.cpp)
ifeq ($(wildcard $(TARGDIR)),)
	@-mkdir -p $(TARGDIR)
endif
	@echo "Compiling $@..."
	$(COMPILER) $(PREFLAGS) -o $@ $< $(POSTFLAGS) \
#		&& strip $@$(EXTEN)

% : $(notdir %.cpp)
ifeq ($(wildcard $(TARGDIR)),)
	@-mkdir -p $(TARGDIR)
endif
	@echo "Compiling $@..."
	$(COMPILER) $(PREFLAGS) -o $(TARGDIR)/$@ $< $(POSTFLAGS) \
#		&& strip $(TARGDIR)/$@$(EXTEN)

#                                                                         #
#                                                                         #
###########################################################################



