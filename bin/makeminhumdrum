#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Mon Aug 10 00:06:00 PDT 2015
# Last Modified: Mon Aug 10 00:06:00 PDT 2015
# Filename:      /bin/makeminhumdrum
# Syntax:        perl 5
# vim:           ts=3
#
# Description:   Merge all library files into minhumdrum.h and minhumdrum.cpp.
#

use strict;

my $srcdir = "src";
my $incdir = "include";
my $license = getLicense("LICENSE.txt");

createIncludeFile($incdir, "minhumdrum.h");
createSourceFile($srcdir, "minhumdrum.cpp");

exit(0);



##############################
##
## createIncludeFile --
##

sub createIncludeFile {
	my ($basedir, $target) = @_;
	open (IFILE, ">$basedir/$target") or die;


	my $contents = "";
	# my @files = getFiles($basedir);
	my @files = (
		"HumHash.h",
		"HumNum.h",
		"HumAddress.h",
		"HumdrumLine.h",
		"HumdrumToken.h",
		"HumdrumFileBase.h",
		"HumdrumFileStructure.h",
		"HumdrumFileContent.h",
		"HumdrumFile.h",
		"Convert.h"
	);


	foreach my $file (@files) {
		$contents .= getMergeContents("$basedir/$file");
	}

	my $date = `date`;
	chomp $date;

   print IFILE <<"EOT";
//
// Programmer:    Craig Stuart Sapp <craig\@ccrma.stanford.edu>
// Creation Date: Sat Aug  8 12:24:49 PDT 2015
// Last Modified: $date
// Filename:      /include/minhumdrum.h
// URL:           https://github.com/craigsapp/minHumdrum/blob/master/include/minhumdrum.h
// Syntax:        C++11
// vim:           ts=3
//
// Description:   Include file for minHumdrum library.
//
/*
$license
*/

#ifndef _MINHUMDRUM_H
#define _MINHUMDRUM_H

#include <math.h>

#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <sstream>
#include <map>

using std::string;
using std::vector;
using std::istream;
using std::ifstream;
using std::ostream;
using std::cout;
using std::cin;
using std::cerr;
using std::endl;
using std::to_string;
using std::stringstream;
using std::map;
using std::invalid_argument;

namespace minHumdrum {

class Convert;
class HumNum;
class HumAddress;
class HumdrumToken;
class HumdrumLine;
class HumdrumFileBase;
class HumdrumFileStructure;
class HumdrumFileContent;
class HumdrumFile;

EOT

	print IFILE <<"EOT";
$contents
} // end of namespace minHumdrum

#endif /* _MINHUMDRUM_H */

EOT

	close IFILE;
}



##############################
##
## createSourceFile --
##

sub createSourceFile {
	my ($basedir, $target) = @_;
	open (SFILE, ">$basedir/$target") or die;

	my $date = `date`;
	chomp $date;

   print SFILE <<"EOT";
//
// Programmer:    Craig Stuart Sapp <craig\@ccrma.stanford.edu>
// Creation Date: Sat Aug  8 12:24:49 PDT 2015
// Last Modified: $date
// Filename:      /include/minhumdrum.cpp
// URL:           https://github.com/craigsapp/minHumdrum/blob/master/src/minhumdrum.cpp
// Syntax:        C++11
// vim:           ts=3
//
// Description:   Source file for minHumdrum library.
//
/*
$license
*/

#include "minhumdrum.h"

namespace minHumdrum {

EOT

	my @files = getFiles($basedir);
	foreach my $file (@files) {
		print SFILE getMergeContents("$basedir/$file");
	}

print SFILE "\n} // end namespace minHumdrum\n";

	close SFILE;
}



##############################
##
## getMergeContents -- return the contents of a file between lines containing
## "START_MERGE" and "END_MERGE".
##

sub getMergeContents {
	my ($file) = @_;
	open (MFILE, "$file") || die "Cannot read $file\n";
	my @contents = <MFILE>;
	close MFILE;
	my $output = "";
	my $active = 0;
	foreach my $line (@contents) {
		if ($active == 0) {
			if ($line =~ /START_MERGE/) {
				$active = 1;
				next;
			}
		}
		if ($active && ($line =~ /END_MERGE/)) {
			$active = 0;
			next;
		}
		next if $active == 0;
		$output .= $line;
	}
	return $output;
}



##############################
##
## getFiles -- Get a list of a files in a directory.
## 

sub getFiles {
	my ($dir) = @_;
	opendir(DIR, $dir) or die;
	my @output;
	my @output2;
	while (my $file = readdir(DIR)) {
		next if $file =~ /^\./;
		next if -d "$dir/$file";
		next if !-r "$dir/$file";
		if ($file =~ /Convert/) {
			# classes which have a dependeny on other classes:
			$output2[@output2] = $file;
		} else {
			$output[@output] = $file;
		}
	}
	@output = sort @output;
	push(@output, @output2);
	return @output;
}



##############################
##
## getLicense -- 
## 

sub getLicense {
	my ($file) = @_;
	open (FILE, $file) or die "Cannot open $file\n";
	my @contents = <FILE>;
	close FILE;
	return join("", @contents);
}



